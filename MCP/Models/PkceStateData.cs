namespace MCP.Models;

/// <summary>
/// Represents PKCE state data stored during the OAuth authorization flow.
/// This data is encrypted and stored in the state parameter to prevent CSRF attacks.
/// </summary>
public class PkceStateData
{
    /// <summary>
    /// The OAuth client ID that initiated the flow (from Claude's registration)
    /// </summary>
    public required string ClientId { get; set; }

    /// <summary>
    /// The redirect URI where the user should be sent after authorization
    /// </summary>
    public required string RedirectUri { get; set; }

    /// <summary>
    /// The PKCE code challenge provided by Claude (SHA-256 hash of code_verifier)
    /// </summary>
    public required string CodeChallenge { get; set; }

    /// <summary>
    /// The code challenge method (always S256 for Claude)
    /// </summary>
    public required string CodeChallengeMethod { get; set; }

    /// <summary>
    /// The proxy's own PKCE code verifier for Entra ID (generated by proxy)
    /// </summary>
    public string? ProxyCodeVerifier { get; set; }

    /// <summary>
    /// The proxy's own PKCE code challenge for Entra ID (SHA-256 of ProxyCodeVerifier)
    /// </summary>
    public string? ProxyCodeChallenge { get; set; }

    /// <summary>
    /// The original state parameter from Claude's authorization request
    /// </summary>
    public required string OriginalState { get; set; }

    /// <summary>
    /// The requested scopes from Claude
    /// </summary>
    public string? Scope { get; set; }

    /// <summary>
    /// The resource parameter (RFC 8707) - MCP server URL
    /// </summary>
    public string? Resource { get; set; }

    /// <summary>
    /// When this state data was created
    /// </summary>
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Login token for the custom login page flow
    /// </summary>
    public string? LoginToken { get; set; }
}
